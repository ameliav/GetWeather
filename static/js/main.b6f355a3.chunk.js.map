{"version":3,"sources":["components/WeatherCards.js","components/WeatherAPI.js","components/Menu.js","App.js","index.js"],"names":["WeatherCards","UNIX_timestamp","typeOfTime","myMonths","myDayOfWeek","a","Date","getHours","getDay","month","getMonth","date","getDate","time","toLocaleString","hour","minute","hour12","description","includes","dt","dayOfWeek","imgDescr","temp","descript","cardAmount","className","key","alt","src","href","weatherArray","map","report","hours","convertTime","forecast","props","type","weather","getForecast","day","singleCard","cardJSX","Fragment","this","renderCards","React","Component","WeatherAPI","state","city","country","errorMessage","noLocMsg","hourlyWeather","currentWeather","dailyWeather","err","setState","currentForecast","dailyForecast","hourlyForecast","lat","long","baseUrl","apiKey","apiUrl","axios","get","then","response","data","current","sunrise","sunset","daily","slice","hourly","getLocalresponse","otherApiUrl","name","window","navigator","geolocation","getCurrentPosition","position","getAPIresponse","coords","latitude","longitude","Menu","onClick","Swal","fire","title","html","icon","confirmButtonText","App","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.b6f355a3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass WeatherCards extends React.Component {\r\n\r\n    convertTime(UNIX_timestamp, typeOfTime=null) {\r\n        let myMonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n        let myDayOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n        var a = new Date(UNIX_timestamp * 1000);\r\n        if (typeOfTime === \"hours\") {\r\n            return a.getHours();\r\n        } else if (typeOfTime === \"day\") {\r\n            return myDayOfWeek[a.getDay()];\r\n        } else if (typeOfTime === \"date\") {\r\n            var month = myMonths[a.getMonth()];\r\n            var date = a.getDate();\r\n            var time = a.toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\r\n            return month + ' ' + date + \" \" + time;\r\n        } else { return a; }\r\n    }\r\n    getForecast(description, hour) {\r\n        if (description === \"overcast clouds\" || description === \"broken clouds\") {\r\n            return [\"Cloudy\", \"cloudy\"];\r\n        } else if (description === \"few clouds\" || description === \"scattered clouds\") {\r\n            return (hour > 5 && hour < 19) ? [\"Partly Cloudy\", \"partlycloudy\"] : [\"Partly Cloudy\", \"partlycloudynight\"]\r\n        } else if (description === \"clear sky\") {\r\n            return (hour > 5 && hour < 19) ? [\"Sunny\", \"sunny\"] : [\"Clear\", \"clear\"]\r\n        } else if (description.includes(\"rain\") || description.includes(\"drizzle\")) {\r\n            return [\"Rain\", \"rain\"];\r\n        } else if(description.includes(\"snow\") || description.includes(\"sleet\")) {\r\n            return [\"Snow\", \"snow\"];\r\n        } else if (description.includes(\"thunderstorm\")) {\r\n            return [\"Thunderstorm\", \"thunder\"];\r\n        }else {\r\n            return [\"Other\", \"sunny\"];\r\n        }\r\n    }\r\n    cardJSX(dt, dayOfWeek, date, imgDescr, temp, descript, cardAmount){\r\n        return (\r\n            <div className={`ui dark card ${cardAmount}`} key={dt}>\r\n                <div className=\"content\">\r\n                    <div className=\"center aligned header\">{dayOfWeek}</div>\r\n                    <div className=\"center aligned meta\"><span className=\"date\">{date}</span></div>\r\n                </div>\r\n                <div className=\"image\"><img alt=\"weather\" src={`images/${imgDescr}.png`}></img></div>\r\n                <div className=\"content\">\r\n                    <a className=\"center aligned header\" href=\"/\">{`${temp} Â° F`}</a>\r\n                    <div className=\"center aligned description\"> {descript}</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    renderCards(weatherArray) {\r\n        return weatherArray.map((report) => {\r\n            let dt = report.dt;\r\n            let hours = this.convertTime(dt,\"hours\");\r\n            let forecast = (this.props.type === \"current\") ? report.weather : report.weather[0].description;\r\n            let descript = this.getForecast(forecast, hours)[0];\r\n            let imgDescr = this.getForecast(forecast, hours)[1];\r\n            let temp = (this.props.type === \"daily\") ? report.temp.day : report.temp;\r\n            let singleCard = (this.props.type === \"current\") ? \"centered\" : \"customcard\";\r\n            return this.cardJSX(dt,this.convertTime(dt,\"day\"),this.convertTime(dt,\"date\"), imgDescr, temp, descript, singleCard);           \r\n        })\r\n    }\r\n    render () {     \r\n        return (            \r\n            <React.Fragment>\r\n                <div className=\"row\">\r\n                    <div className=\"two wide column\"></div>\r\n                    <div className=\"twelve wide column\">\r\n                        <div className={(this.props.type === \"current\") ? \"ui basic right aligned segment\" : \"customcardlist\"}>\r\n                            {this.renderCards(this.props.weatherArray)}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"two wide column\"></div>\r\n                </div>\r\n                <div className=\"extra padded row\"><div className=\"column\"></div></div>\r\n                <div className=\"extra padded row\"><div className=\"column\"></div></div>\r\n            </React.Fragment>                     \r\n        )\r\n    }\r\n}\r\nexport default WeatherCards;\r\n\r\n//for future implementation to get sunrise and sunset to match when the sun and moon images appear\r\n/*\r\n    getSunriseSunset(weatherArray) {\r\n        if (Array.isArray(weatherArray) && weatherArray.length && this.props.type === \"current\"){\r\n            return (console.log(\r\n                [this.convertTime(weatherArray[0].sunrise, \"hours\")\r\n                ,this.convertTime(weatherArray[0].sunset, \"hours\"),\r\n                this.convertTime(weatherArray[0].sunrise) ])\r\n            )\r\n        }\r\n    }\r\n*/","import React from 'react';\r\nimport axios from 'axios';\r\nimport WeatherCards from './WeatherCards';\r\n\r\nclass WeatherAPI extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            city: 'Unknown City', country: 'Unknown Country', errorMessage: '', \r\n            noLocMsg: '', hourlyWeather: [], currentWeather: [], dailyWeather: []\r\n        };\r\n    };\r\n    getLocalresponse(err) {\r\n        this.setState({\r\n            currentWeather: this.props.currentForecast,\r\n            dailyWeather: this.props.dailyForecast,\r\n            hourlyWeather: this.props.hourlyForecast,\r\n            city:'Merrifield',country:'US',noLocMsg:\"Using cached data.\",\r\n            errorMessage: err\r\n        });\r\n    }\r\n    getAPIresponse(lat, long) {\r\n        let baseUrl = \"https://api.openweathermap.org/data/2.5/\";\r\n        let apiKey = \"13225715ae7ca76fee401e51d3ed6692\";\r\n        let apiUrl = baseUrl+\"onecall?lat=\"+lat+\"&lon=\"+long+\"&units=imperial&exclude=minutely,alerts&appid=\"+apiKey;\r\n        axios.get(apiUrl).then(response => {   \r\n                this.setState({\r\n                    currentWeather: [{\r\n                        dt:response.data.current.dt,temp:response.data.current.temp,\r\n                        weather:response.data.current.weather[0].description,\r\n                        sunrise: response.data.current.sunrise, sunset: response.data.current.sunset}],\r\n                    dailyWeather: response.data.daily.slice(0, 5),\r\n                    hourlyWeather: response.data.hourly.slice(0, 5)\r\n                });\r\n            }, err => {\r\n                //console.log(\"Weather API request \"+ err) //Error\r\n                this.getLocalresponse(err);\r\n        })\r\n        let otherApiUrl = baseUrl+\"forecast?lat=\"+lat+\"&lon=\"+long+\"&appid=\"+apiKey;\r\n        axios.get(otherApiUrl).then(response => {           \r\n                this.setState({ city: response.data.city.name, country: response.data.city.country})               \r\n            }, err => {\r\n                //console.log(\"Weather API request \"+ err) //Error\r\n                this.getLocalresponse(err);\r\n        })\r\n    }\r\n    componentDidMount() {\r\n        window.navigator.geolocation.getCurrentPosition(    //gets coordinates from user's browser\r\n            (position) => {           \r\n                this.getAPIresponse(position.coords.latitude, position.coords.longitude);//success\r\n            }, \r\n            (err) => {\r\n                //console.log(\"No coordinates yet \"+err );\r\n                this.setState({noLocMsg: \"Default location\", errorMessage: err});\r\n                this.getAPIresponse(37.774929, -122.419416);\r\n            }\r\n        )\r\n    };\r\n    render() {   \r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"row\"><div className=\"column\">\r\n                    <div className=\"ui basic right aligned segment\">\r\n                        {this.state.city}, {this.state.country}\r\n                        <i className=\"map marker alternate icon\"></i>\r\n                        <br/>{this.state.noLocMsg}\r\n                    </div>\r\n                </div></div>\r\n                <WeatherCards weatherArray={this.state.currentWeather} type=\"current\"/>\r\n                <div className=\"extra padded row\"><div className=\"column\">\r\n                    <div className=\"ui large header center aligned\">5-Hour Forecast</div>\r\n                </div></div>\r\n                <WeatherCards weatherArray={this.state.hourlyWeather} type=\"hourly\"/>\r\n                <div className=\"row\"><div className=\"column\">\r\n                    <div className=\"ui large header center aligned\">5-Day Forecast</div>\r\n                </div></div>\r\n                <WeatherCards weatherArray={this.state.dailyWeather} type=\"daily\"/>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default WeatherAPI;","import React from 'react';\r\nimport Swal from 'sweetalert2';\r\n\r\nfunction Menu(){\r\n    let aboutClick = () =>\r\n    {\r\n        return Swal.fire({\r\n        title: 'About',\r\n        html: 'This was a project made by <b>Amelia V.</b><br/>It shows the weather at your location.<br/>'+\r\n        'If your browser cannot detect your location, a default location is used to request the data. <br/>'+\r\n        'The project uses OpenWeather API. If the API unreachable, hardcoded data will be shown.',\r\n        icon: 'info',\r\n        confirmButtonText: '<i className=\"icon thumbs up\"></i> Ok'\r\n        })\r\n    }\r\n    return (\r\n        <div className=\"ui centered grid\">\r\n            <div className=\"right aligned column\">\r\n                <div className=\"ui teal inverted compact menu\">\r\n                    <div className=\" item\">\r\n                        <h4><i className=\"umbrella icon\"></i> Weather App</h4>\r\n                    </div>\r\n                    <div className=\"item\">\r\n                        <div className=\"ui teal button\" onClick={aboutClick}>About</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Menu;","import React from 'react';\nimport WeatherAPI from './components/WeatherAPI';\nimport Menu from './components/Menu';\nconst currentForecast = [{ dt: 1602627220, temp: 66.31, weather: \"scattered clouds\", sunrise: 1602626400, sunset: 1602640800}];\nconst hourlyForecast = [\n  {\"dt\": 1602626400, \"temp\": 64.49, \"weather\": [{ \"description\": \"scattered clouds\" }]},\n  {\"dt\": 1602630000, \"temp\": 62.65, \"weather\": [{ \"description\": \"scattered clouds\" }]},\n  {\"dt\": 1602633600, \"temp\": 60.26, \"weather\": [{ \"description\": \"scattered clouds\" }]},\n  {\"dt\": 1602637200, \"temp\": 58.32, \"weather\": [{ \"description\": \"clear sky\" }]},\n  {\"dt\": 1602640800, \"temp\": 56.7, \"weather\": [{ \"description\": \"clear sky\" }]}\n];\nconst dailyForecast = [\n  {\"dt\": 1602604800,\"temp\": {\"day\": 58.15},\"weather\": [{ \"description\": \"overcast clouds\"}]},\n  {\"dt\": 1602691200, \"temp\": {\"day\": 62.6},\"weather\": [{\"description\": \"clear sky\"}]},\n  {\"dt\": 1602777600, \"temp\": {\"day\": 66.63},\"weather\": [{ \"description\": \"clear sky\"}]},\n  {\"dt\": 1602864000,\"temp\": {\"day\": 50.13},\"weather\": [{\"description\": \"heavy intensity rain\"}]},\n  {\"dt\": 1602950400,\"temp\": {\"day\": 52.18}, \"weather\": [{\"description\": \"light rain\"}]}\n];\n \nfunction App() {\n  return (\n  <React.Fragment>\n    <Menu/>\n    <div className=\"ui grid\"> \n      <WeatherAPI \n        dailyForecast={dailyForecast}\n        currentForecast={currentForecast}\n        hourlyForecast={hourlyForecast}\n      />\n    </div>\n  </React.Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.querySelector('#root')\n);\n\n\n"],"sourceRoot":""}